<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[详解defer和async]]></title>
      <url>/2017/09/05/%E8%AF%A6%E8%A7%A3defer%E5%92%8Casync/</url>
      <content type="html"><![CDATA[<p>defer和async是script标签的两个属性，用于在不阻塞页面文档解析的前提下，控制脚本的下载和执行。 </p>
<h3 id="页面加载和渲染过程"><a href="#页面加载和渲染过程" class="headerlink" title="页面加载和渲染过程"></a>页面加载和渲染过程</h3><ol>
<li>浏览器通过HTTP协议请求服务器，获取HMTL文档并开始从上到下解析，构建DOM； </li>
<li>在构建DOM过程中，如果遇到外联的样式声明和脚本声明，则暂停文档解析，创建新的网络连接，并开始下载样式文件和脚本文件； </li>
<li>样式文件下载完成后，构建CSSDOM；脚本文件下载完成后，解释并执行，然后继续解析文档构建DOM </li>
<li>完成文档解析后，将DOM和CSSDOM进行关联和映射，最后将视图渲染到浏览器窗口<br>在这个过程中，脚本文件的下载和执行是与文档解析同步进行，也就是说，它会阻塞文档的解析，如果控制得不好，在用户体验上就会造成一定程度的影响。<br>所以我们需要清楚的了解和使用defer和async来控制外部脚本的执行。<br>在开发中我们可以在script中声明两个不太常见的属性：defer和async，下面分别解释了他们的用法：<blockquote>
<p>defer：用于开启新的线程下载脚本文件，并使脚本在文档解析完成后执行。 async<br>async：HTML5新增属性，用于异步下载脚本文件，下载完毕立即解释执行代码。 </p>
</blockquote>
</li>
</ol>
<p>为了演示脚本的执行情况，进而介绍这两个属性的作用，我们先来搭建一个简单的服务器,项目目录如图所示：<br><img src="http://otjhywl32.bkt.clouddn.com/%E8%AF%A6%E8%A7%A3defer%E5%92%8Casync1.png" alt="Alt text"><br>同时创建了一个简易的Node服务器server.<a href="http://lib.csdn.net/base/javascript" target="_blank" rel="external">js</a><br>，其代码如下：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> typeMapping <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'html'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>
    <span class="token string">'js'</span>  <span class="token punctuation">:</span> <span class="token string">'text/javascript'</span><span class="token punctuation">,</span>
    <span class="token string">'css'</span> <span class="token punctuation">:</span> <span class="token string">'text/css'</span><span class="token punctuation">,</span>
    <span class="token string">'ico'</span> <span class="token punctuation">:</span> <span class="token string">'image/x-icon'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> getResourceExtension <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>
    <span class="token keyword">var</span> lastIndexOfDot <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastIndexOfDot <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'text/plain'</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> url<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>lastIndexOfDot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> respondResourceToClient <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//read the reource and respond via 'pipe'</span>
    fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\//</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'requesting url: '</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> extension <span class="token operator">=</span> <span class="token function">getResourceExtension</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>

    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> typeMapping<span class="token punctuation">[</span>extension<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> delay <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">respondResourceToClient</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> time <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>extension <span class="token operator">===</span> <span class="token string">'html'</span> <span class="token operator">||</span> extension <span class="token operator">===</span> <span class="token string">'css'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>extension <span class="token operator">===</span> <span class="token string">'js'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'listening at port 3000...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>从上面的代码我们可以看出，当服务器接收到请求之后，会判断请求资源是否为JS，如果是则延迟1s后返回对应的资源。<br>启动这个服务很简单，只需执行node server.js即可，然后就可以在浏览器中输入<a href="http://localhost:3000/js/index.html访问主页了，现在我们来看看index.html中的内容：" target="_blank" rel="external">http://localhost:3000/js/index.html访问主页了，现在我们来看看index.html中的内容：</a></p>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>defer-async<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> html </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
            <tag> 异步 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript参数按值传递的理解]]></title>
      <url>/2017/08/31/JavaScript%E5%8F%82%E6%95%B0%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>看到一个这样的问题</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">setName</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>
  obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Greg"</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setName</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//"Tom"</span>
</code></pre>
<p>按照一般的理解第二次重写name属性会覆盖原先的name，输出应该是”Greg”才对。<br>这个问题其实就是高程书上的原题，高程书的一些地方看了很多遍，但是每次重看都还是会有新的理解，这里理解的关键在于JavaScript函数的参数是按值传递的。<br>之前只是粗泛的了解参数按值传递，但是却并没有搞清楚本质，结合高程书和知乎的这个回答<a href="https://www.zhihu.com/question/27114726/answer/35481766" target="_blank" rel="external">链接</a>才对这个问题算是真正理解了。</p>
<h3 id="栈内存与堆内存"><a href="#栈内存与堆内存" class="headerlink" title="栈内存与堆内存"></a>栈内存与堆内存</h3><p>简单类型的值，它们的值直接存储在变量访问的位置，这是因为这些简单类型占据的空间是固定的，所以可将他们存储在较小的内存区域 – 栈中。这样存储便于迅速查寻变量的值。每次复制都是一个单独的副本，之间相互独立</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> num2 <span class="token operator">=</span> num1<span class="token punctuation">;</span>
</code></pre>
<p>图示<br><img src="http://otjhywl32.bkt.clouddn.com/JavaScript%E5%8F%82%E6%95%B0%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%E7%9A%84%E7%90%86%E8%A7%A32.PNG" alt="Alt text"></p>
<p> 引用类型的值存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存地址。这是因为：引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。相反，放在变量的栈空间中的值是该对象存储在堆中的地址。地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span> 
obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Nicholas"</span><span class="token punctuation">;</span> 
<span class="token function">alert</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"Nicholas"</span>
</code></pre>
<p>图示<br><img src="http://otjhywl32.bkt.clouddn.com/JavaScript%E5%8F%82%E6%95%B0%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%E7%9A%84%E7%90%86%E8%A7%A33.PNG" alt="Alt text"></p>
<h3 id="ECMAScript中所有函数的参数都是按值来传递的"><a href="#ECMAScript中所有函数的参数都是按值来传递的" class="headerlink" title="ECMAScript中所有函数的参数都是按值来传递的"></a>ECMAScript中所有函数的参数都是按值来传递的</h3><p>其实<strong>ECMAScript函数参数实际上是函数的局部变量</strong>，因此本题中将一个对象作为参数传入时，复制了一个指针指向对象在堆内存中的内存地址。按值复制传递上复制了一个指针变量，这个变量是按值传递的。<br>在调用函数内部将一个新的Object赋给obj之前内存情况是这样的：<br><img src="http://otjhywl32.bkt.clouddn.com/JavaScript%E5%8F%82%E6%95%B0%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%E7%9A%84%E7%90%86%E8%A7%A37PNG.PNG" alt="Alt text"><br>如果是按引用传递，就会直接把第一个（也就是变量本身）整个传递进去（就不会有第二格的存在了）<br>再将新的Object赋给obj之后：<br><img src="http://otjhywl32.bkt.clouddn.com/JavaScript%E5%8F%82%E6%95%B0%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%E7%9A%84%E7%90%86%E8%A7%A36.PNG" alt="Alt text"><br>可以看到obj指向新的Object内存地址，而person引用的仍然是原来的Object，并且在函数内部新建的局部对象会在函数执行完毕后销毁，因此打印的name是第一个。</p>
<h3 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h3><p>《JavaScript高级程序设计》</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript深拷贝]]></title>
      <url>/2017/08/30/javascript%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      <content type="html"><![CDATA[<h3 id="基本类型与引用类型"><a href="#基本类型与引用类型" class="headerlink" title="基本类型与引用类型"></a>基本类型与引用类型</h3><p>在JavaScript中，基本类型的是按值复制的，每次复制都是一个副本，各个副本是完全独立的，引用类型的值是按引用复制的，这个值实际上是一个指针，这个指针指向的存储在堆内存中的一个对象，因此无论复制多少份，引用的都是一个对象，更改其中一个所有的引用都会受到影响。</p>
<p><img src="http://otjhywl32.bkt.clouddn.com/javascript%E6%B7%B1%E6%8B%B7%E8%B4%9D.PNG" alt="javascript深拷贝.PNG"></p>
<h3 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h3><p>深拷贝与浅拷贝都是针对相对于引用类型的说法，浅拷贝即普通的复制操作（常用的“=”复制），复制的是对内存地址的引用即上面介绍的。而深拷贝则是开辟一块新的内存地址，修改一个对象，不会改变另一个对象。深拷贝是复制变量值，遇到非基本类型时，则递归至基本类型后再复制。</p>
<h3 id="实现深拷贝的两个方法"><a href="#实现深拷贝的两个方法" class="headerlink" title="实现深拷贝的两个方法"></a>实现深拷贝的两个方法</h3><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
      age <span class="token punctuation">:</span>  <span class="token number">18</span><span class="token punctuation">,</span>
      hobby<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token string">'basketball'</span><span class="token punctuation">,</span><span class="token string">'read'</span><span class="token punctuation">,</span><span class="token string">'travel'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      job<span class="token punctuation">:</span> <span class="token string">'programmer'</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span>dest<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">var</span> dest <span class="token operator">=</span> dest <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//如果dest为true将dest赋给dest，否则令其为一个空对象</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> src<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                      <span class="token keyword">if</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Array]'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                      <span class="token comment" spellcheck="true">//为数组时</span>
                      dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                      <span class="token comment" spellcheck="true">//为对象时</span>
                      dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment" spellcheck="true">//递归</span>
                    <span class="token function">deepCopy</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
             <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
               dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
         <span class="token keyword">return</span> dest
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> Tom <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'Tom'</span><span class="token punctuation">}</span>
    result <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span>Tom<span class="token punctuation">)</span>
    result<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"movie"</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre>
<p>结果<br><img src="http://otjhywl32.bkt.clouddn.com/JavaScript%E6%B7%B1%E6%8B%B7%E8%B4%9D1.PNG" alt="javascript深拷贝.PNG"></p>
<h4 id="JSON解析"><a href="#JSON解析" class="headerlink" title="JSON解析"></a>JSON解析</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
      age <span class="token punctuation">:</span>  <span class="token number">18</span><span class="token punctuation">,</span>
      hobby<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token string">'basketball'</span><span class="token punctuation">,</span><span class="token string">'read'</span><span class="token punctuation">,</span><span class="token string">'travel'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      job<span class="token punctuation">:</span> <span class="token string">'programmer'</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
 <span class="token keyword">var</span> result <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span>
result<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"movie"</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre>
<p>结果与上相同， JSON.stringify() 方法把一个JavaScript对象序列化为一个JSON字符串，JSON.parse() 方法将数据转换为 JavaScript 对象。<br>b = JSON.parse( JSON.stringify(a) )这种方法的局限性在于无法复制函数</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[for in与for of及遍历器Iterator]]></title>
      <url>/2017/08/28/for-in%E4%B8%8Efor-of%E5%8F%8A%E9%81%8D%E5%8E%86%E5%99%A8Iterator/</url>
      <content type="html"><![CDATA[<h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><p>for in可以用来遍历对象的可枚举属性列表（包括[[prototype]]链），单独使用in操作符会检查属性是否在对象及其[[prototype]]原型链中（无论是否可以枚举）</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token punctuation">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
</code></pre>
<p>但是使用for in循环输出的属性名的顺序是不可预测的，返回的先后次序因浏览器而异。</p>
<p>使用for in也可以遍历数组，属性为数组的索引，但是会有以下问题：</p>
<ul>
<li>index索引为字符串型数字，不能直接进行几何运算</li>
<li>遍历顺序有可能不是按照实际数组的内部顺序</li>
<li>使用for in会遍历数组所有的可枚举属性，包括原型。例如例子中的原型方法method和name属性</li>
</ul>
<p><img src="http://otjhywl32.bkt.clouddn.com/for%20in%E4%B8%8Efor%20of%E5%8F%8A%E9%81%8D%E5%8E%86%E5%99%A8Iterator1.PNG" alt="Alt text"><br>因此for in更适合用来遍历对象</p>
<h3 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h3><p>前面说了for in遍历的是key(键名)，使用ES6的for of可以遍历数组的value(键值),mdn上对于for of的说明</p>
<blockquote>
<p>for…of语句在可迭代对象(包括 Array, Map, Set, String, TypedArray，arguments 对象等等)上创建一个迭代循环，对每个不同属性的属性值,调用一个自定义的有执行语句的迭代挂钩</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 1</span>
<span class="token comment" spellcheck="true">// 2</span>
<span class="token comment" spellcheck="true">// 3</span>
</code></pre>
<p>for of循环不仅支持数组，实际上述定义的可迭代对象，可迭代对象指的是具备Iterator接口的数据结构</p>
<h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p>实际上for of遍历就是基于Iterator，当使用for of循环遍历某种数据结构时，该循环会自动去寻找Iterator接口</p>
<blockquote>
<p>遍历器（Iterator）是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署Iterator接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。</p>
</blockquote>
<p>Iterator 的作用有三个：一是为各种数据结构，提供一个统一的、简便的访问接口；二是使得数据结构的成员能够按某种次序排列；三是ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费。</p>
<blockquote>
<p>ES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历的”（iterable）。Symbol.iterator属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。执行这个函数，就会返回一个遍历器。至于属性名Symbol.iterator，它是一个表达式，返回Symbol对象的iterator属性</p>
</blockquote>
<p>原生具备Iterator接口的数据结构如下</p>
<ul>
<li>Array</li>
<li>Map</li>
<li>Set</li>
<li>String</li>
<li>TypedArray</li>
<li>函数的arguments对象</li>
<li>NodeList对象 </li>
</ul>
<p>for of循环首先会向北访问对象请求一个迭代器对象，然后通过调用迭代器对象的next()方法来遍历所有返回值</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> iter <span class="token operator">=</span> arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { value: 'a', done: false }</span>
iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { value: 'b', done: false }</span>
iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { value: 'c', done: false }</span>
iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { value: undefined, done: true }</span>
</code></pre>
<p>上面代码中，变量arr是一个数组，原生就具有遍历器接口，部署在arr的Symbol.iterator属性上面。所以，调用这个属性，就得到遍历器对象。value是当前的遍历值，done是一个布尔值，表示是否还有可以遍历的值，这里遍历到第三个时，已经没有可以遍历的值了，但是done仍然是false，下一个才是true，这个机制和ES6中发生器函数的语义相关，这里不做讨论。</p>
<p>普通的对象没有内置的Iterator接口，无法用for of遍历，但是我们可以用Symbol.iterator来自己完成对对象的遍历</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  b<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  c<span class="token punctuation">:</span> <span class="token number">4</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span> myObject<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  writeable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  value<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> ks <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span> o <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      next<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          value<span class="token punctuation">:</span> o<span class="token punctuation">[</span>ks<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          done<span class="token punctuation">:</span> <span class="token punctuation">(</span>idx <span class="token operator">></span> ks<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> it <span class="token operator">=</span> myObject<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{ value: 2, done:false}</span>
it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{ value: 3, done:false}</span>
it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{ value: 4, done:false}</span>
it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{ value: undefined, done:true}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token keyword">of</span> myObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 2</span>
<span class="token comment" spellcheck="true">// 3</span>
<span class="token comment" spellcheck="true">// 4</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[字面量创建原型对象的注意事项]]></title>
      <url>/2017/08/26/%E5%AD%97%E9%9D%A2%E9%87%8F%E5%88%9B%E5%BB%BA%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      <content type="html"><![CDATA[<h3 id="constructor指向"><a href="#constructor指向" class="headerlink" title="constructor指向"></a>constructor指向</h3><p>mdn上对于constructor的定义</p>
<blockquote>
<p>返回一个指向创建了该对象原型的函数引用。需要注意的是，该属性的值是那个函数本身，而不是一个包含函数名称的字符串</p>
</blockquote>
<p>我们知道无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个constructor属性，这个属性是一个指向prototype属性所在函数的指针。</p>
<p>因此当创建一个函数后，constructor指向这个函数<br><img src="http://otjhywl32.bkt.clouddn.com/%E5%AD%97%E9%9D%A2%E9%87%8F%E5%88%9B%E5%BB%BA%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B91.PNG" alt="Alt text"> </p>
<p>但是在原型对象上添加属性时，如果每添加属性和方法就要敲一遍Person.protype就有些麻烦。因此可以用一个包含所有属性和方法的对象字面量来重写整个原型对象，但是这样就会有一个问题，constructor不再指向Person</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

Person<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  name <span class="token punctuation">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>
  age <span class="token punctuation">:</span> <span class="token number">29</span><span class="token punctuation">,</span>
  job <span class="token punctuation">:</span> <span class="token string">"Software Engineer"</span><span class="token punctuation">,</span>
  sayName <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> friend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>friend<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>friend<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>
</code></pre>
<p>这是因为当我们使用对象字面量重写原型对象时，实际上完全重写了默认的prototype对象，因此constructor属性也就变成了新对象的constructor属性（指向Object构造函数），我们可以手动设置constructor : Person。但是以这种方式重设constructor属性会导致它的[[Enumerable]]特性设置为true,默认情况下，原生的constructor属性时不可枚举的。可以再通过Object.defineProperty重设构造函数。</p>
<h3 id="原型的动态性"><a href="#原型的动态性" class="headerlink" title="原型的动态性"></a>原型的动态性</h3><p>我们可以在创建实例后，再在原型对象上添加属性方法</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> friend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

friend<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//"hi"</span>
</code></pre>
<p>尽管可以随时为原型添加属性和方法，并且修改能够立即在所有对象实例中反映出来，但如果使用对象字面量重写整个原型对象，情况就不一样了。<br><img src="http://otjhywl32.bkt.clouddn.com/%E5%AD%97%E9%9D%A2%E9%87%8F%E5%88%9B%E5%BB%BA%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A12.PNG" alt="Alt text"><br>此时报错并没有找到friend的sayName方法，因为当我们使用对象字面量重写原型对象，实际上是创建了一个新的原型对象（通过Object构造函数），并将contructor手动指向Person，而<strong>实例中的[[Prototype]]指针仅指向原型，而不指向构造函数(即指向最初的原型)。</strong>而把原型修改为零一个对象就等于切断了构造函数与最初原型之间的联系。<br>关系如图所示<br><img src="http://otjhywl32.bkt.clouddn.com/%E5%AD%97%E9%9D%A2%E9%87%8F%E5%88%9B%E5%BB%BA%E5%8E%9F%E5%9E%8B%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B93.PNG" alt="Alt text"><br>因此最好是在创建实例之前修改原型</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue双向绑定原理]]></title>
      <url>/2017/08/21/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<p><a href="https://ascend13.github.io/vue.js-Reactivity/" target="_blank" rel="external">预览地址</a></p>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>首先需要知道vue实现双向绑定的原理是基于数据劫持的，通过Object.defineProperty()的getter和setter对属性的劫持，并结合订阅/发布模式，当数据变化时对订阅者发出通知，触发订阅者的更新方法来更新视图。</p>
<h3 id="劫持子节点"><a href="#劫持子节点" class="headerlink" title="劫持子节点"></a>劫持子节点</h3><p>因为我们最终的效果要和原生vue保持一致，vue的模板语法如下</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    {{ text }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<p>通过DocumentFragment（文档片段）最终生成浏览器能够识别的html,可以将DocumentFragment看成一个容器，它可以包含多个子节点，当我们将它插入到 DOM 中时，只有它的子节点会插入目标节点，并且速度和性能也远远优于直接操作DOM，经过处理后，再将 DocumentFragment 整体返回插入挂载目标。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> nodeToFragment <span class="token punctuation">(</span>node<span class="token punctuation">,</span> vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> flag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> child<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//appendChild会删除源节点，接着firstChild就指向了第二个节点，达到劫持所有子节点的目的,赋值语句也有返回值</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>child <span class="token operator">=</span> node<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token function">compile</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">;</span>
            flag<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//劫持node的所有子节点</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>nodeToFragment函数接受挂载节点和vue实例为参数，当我们将app节点传入时，先生成一个DocumentFragment容器，while语句中，将app的第一个子节点传给child，赋值语句也有返回值，通过compile解析模板，并将其插入到flag时appendchild会删除源节点，因此while循环下一次就指向了第二个节点，进而达到劫持所有子节点的目的。</p>
<h3 id="实现compile功能"><a href="#实现compile功能" class="headerlink" title="实现compile功能"></a>实现compile功能</h3><p>在劫持到子节点后实现compile功能解析模板指令，并作初始化数据绑定</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> compile <span class="token punctuation">(</span>node<span class="token punctuation">,</span> vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/\{\{(.*)\}\}/</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//节点类型为元素</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> attr <span class="token operator">=</span> node<span class="token punctuation">.</span>attributes<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//解析属性</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> attr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>attr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeName <span class="token operator">==</span> <span class="token string">'v-model'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">var</span> name <span class="token operator">=</span> attr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeValue<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取v-model绑定的属性名</span>
                    node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment" spellcheck="true">//给相应的data属性赋值，进而触发该属性的set方法</span>
                        vm<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                
                    node<span class="token punctuation">.</span>value <span class="token operator">=</span> vm<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将data的值赋给该node</span>
                    node<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'v-model'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//节点类型为text</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">var</span> name <span class="token operator">=</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取匹配到的字符串</span>
                name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                node<span class="token punctuation">.</span>nodeValue <span class="token operator">=</span> vm<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将data的值赋给该node,触发属性的get方法</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="响应式绑定的实现"><a href="#响应式绑定的实现" class="headerlink" title="响应式绑定的实现"></a>响应式绑定的实现</h3><p>接着定义defineReactive函数进行属性劫持</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> defineReactive <span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> val<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token keyword">return</span>
                val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>getter:在读取属性时调用的函数，返回值用作属性值<br>setter：在写入属性时调用的函数，该方法接受唯一参数，并将改参数的新值分配给该属性</p>
<p>实现observer数据监听器</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> observer <span class="token punctuation">(</span>obj<span class="token punctuation">,</span> vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">defineReactive</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 for…in 循环遍历该对象时返回的顺序一致 （两者的主要区别是 一个 for-in 循环还会枚举其原型链上的属性）。</p>
</blockquote>
<p>Vue构造函数</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> Vue <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> options<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
            <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>
            <span class="token function">observer</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> id <span class="token operator">=</span> options<span class="token punctuation">.</span>el<span class="token punctuation">;</span>
            <span class="token keyword">var</span> dom <span class="token operator">=</span> <span class="token function">nodeToFragment</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//编译完成后,将dom返回到app中</span>
            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre>
<p>当我们new一个vue实例，实际上是调用vue构造函数，作为数据绑定的入口，进行初始化。</p>
<h3 id="订阅发布模式"><a href="#订阅发布模式" class="headerlink" title="订阅发布模式"></a>订阅发布模式</h3><p>此时虽然已经做了响应式的数据绑定，但是当我们改变内容时，但是文本节点内容并未变化，setter只是将改变的新值赋给defineReactive全局变量val，这里通过订阅发布模式来实现。</p>
<blockquote>
<p>订阅发布模式又叫观察者模式，它定义了对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。</p>
</blockquote>
<p>实现Wacher</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> Watcher <span class="token punctuation">(</span>vm<span class="token punctuation">,</span> node<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Watcher<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
        update<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span>nodeValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>

        <span class="token comment" spellcheck="true">//获取data中的属性值</span>
        <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//触发相应属性的get</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>watcher订阅者作为连接observer和compile的桥梁,主要任务为：</p>
<ul>
<li>在自身实例化时往属性订阅器(dep)里面添加自己</li>
<li>自身必须有一个update()方法,来更新视图</li>
<li>待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调</li>
</ul>
<p>将自己赋给了一个全局变量 Dep.target，其次，执行了 update 方法，进而执行了 get 方法，get 的方法读取了 vm 的访问器属性，从而触发了访问器属性的 get 方法，get 方法中将该 watcher 添加到了对应访问器属性的 dep 中； 最后，将 Dep.target 设为空。因为它是全局变量，也是 watcher 与 dep 关联的唯一桥梁，任何时刻都必须保证 Dep.target 只有一个值。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> defineReactive <span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">var</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//添加订阅者watcher到主题对象Dep</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> val<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token keyword">return</span>
                val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//作为发布者发出通知</span>
                dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>我们是在input节点改变数据，text节点更新视图，因此在text节点添加订阅者，期望接受数据改变同通知。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">var</span> name <span class="token operator">=</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取匹配到的字符串</span>
                name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                node<span class="token punctuation">.</span>nodeValue <span class="token operator">=</span> vm<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将data的值赋给该node,触发属性的get方法</span>

                <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> node<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre>
<p>最后完成调度中心Dep，用来存储所有的订阅者并关联添加订阅者和通知（notify）功能</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> Dep <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    Dep<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
        addSub<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>

        notify<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sub<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>至此双向绑定已完成，完整代码<a href="https://github.com/ascend13/vue.js-Reactivity" target="_blank" rel="external">点我</a></p>
]]></content>
      
        <categories>
            
            <category> vue.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue.js </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[es6块级作用域踩坑]]></title>
      <url>/2017/08/04/ES6%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%B8%A9%E5%9D%91%20/</url>
      <content type="html"><![CDATA[<p>本来以为自己对js作用域这方面已经很了解了，但是看到这样一个简单的问题后，通过查阅却发现这里面其实还有不小的坑。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2222'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>初看好像没什么难度，由于js函数声明提升，，后面声明的foo覆盖第一个，最后打印2222。<br>但实际结果却是这样的<br><img src="http://otjhywl32.bkt.clouddn.com/es6%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%B8%A9%E5%9D%91.PNG"><br>经过查阅资料和博客，发现这个问题其实在ES5和ES6中有着天壤之别，并且浏览器的处理方式和语法规定也不相同。<br>在ES5中是这样规定的</p>
<blockquote>
<p>函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明</p>
</blockquote>
<p>但是es5并没有块级作用域，同时浏览器为了兼容，还是还是支持在块级作用域之中声明函数<br>如果是这样的话不就是最开始分析的那样了吗，实际上自己在测试的时候使用的是chrome浏览器，chrome是支持es6的，es6对块级作用域内的函数声明处理却是这样的</p>
<blockquote>
<p>ES6 引入了块级作用域，明确允许在块级作用域之中声明函数。ES6 规定，块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用。</p>
</blockquote>
<p>按照这种规定，理论上输出的也是1111，但为什么是报错<br>原来如果改变了块级作用域内声明的函数的处理规则，显然会对老代码产生很大影响。为了减轻因此产生的不兼容问题，ES6在附录B里面规定，浏览器的实现可以不遵守上面的规定，有自己的行为方式。</p>
<blockquote>
<p>-允许在块级作用域内声明函数。<br>-函数声明类似于var，即会提升到全局作用域或函数作用域的头部。<br>-同时，函数声明还会提升到所在的块级作用域的头部。</p>
</blockquote>
<p>所以在浏览器的 ES6 环境中，块级作用域内声明的函数，行为类似于var声明的变量<br>由于变量提升，实际代码应该是这样的</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> undefined
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'22222'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。</strong></p>
<p>参考：阮一峰《ECMAScript6入门》</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue.js实例生命周期]]></title>
      <url>/2017/07/30/vue-js%E5%AE%9E%E4%BE%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<h3 id="一-生命周期示意图"><a href="#一-生命周期示意图" class="headerlink" title="一.生命周期示意图"></a>一.生命周期示意图</h3><p><img src="http://otjhywl32.bkt.clouddn.com/vue.js%E5%AE%9E%E4%BE%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" width="500" height="1200" align="center/"></p>
<h3 id="二-生命周期钩子"><a href="#二-生命周期钩子" class="headerlink" title="二.生命周期钩子"></a>二.生命周期钩子</h3><ul>
<li>beforeCreate<br>在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。</li>
<li>created<br>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</li>
<li>beforeMount<br>在挂载开始之前被调用：相关的 render 函数首次被调用。<br><strong><em>(你可能有兴趣知道，Vue 的模板实际是编译成了 render 函数。这是一个实现细节，通常不需要关心)</em></strong></li>
<li>mounted<br>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内</li>
<li>beforeUpdate<br>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。</li>
<li>updated<br>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。<br>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。<em>然而在大多数情况下，你应该避免在此期间更改状态。</em></li>
<li>beforeDestroy<br>实例销毁之前调用。在这一步，实例仍然完全可用。</li>
<li>destroyed<br>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<h3 id="三-例子"><a href="#三-例子" class="headerlink" title="三.例子"></a>三.例子</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  el<span class="token punctuation">:</span> <span class="token string">"#container"</span><span class="token punctuation">,</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      test <span class="token punctuation">:</span> <span class="token string">'hello world'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  beforeCreate<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">showData</span><span class="token punctuation">(</span><span class="token string">'创建vue实例前'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
   created<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">showData</span><span class="token punctuation">(</span><span class="token string">'创建vue实例后'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  beforeMount<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">showData</span><span class="token punctuation">(</span><span class="token string">'挂载到dom前'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  mounted<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">showData</span><span class="token punctuation">(</span><span class="token string">'挂载到dom后'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  beforeUpdate<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">showData</span><span class="token punctuation">(</span><span class="token string">'数据变化更新前'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  updated<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">showData</span><span class="token punctuation">(</span><span class="token string">'数据变化更新后'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
   beforeDestroy<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      vm<span class="token punctuation">.</span>test <span class="token operator">=</span><span class="token string">"3333"</span><span class="token punctuation">;</span>
      <span class="token function">showData</span><span class="token punctuation">(</span><span class="token string">'vue实例销毁前'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  destroyed<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">showData</span><span class="token punctuation">(</span><span class="token string">'vue实例销毁后'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">realDom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'真实dom结构：'</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">showData</span><span class="token punctuation">(</span>process<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">)</span><span class="token punctuation">;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data 数据：'</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>test<span class="token punctuation">)</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'挂载的对象：'</span><span class="token punctuation">)</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>$el<span class="token punctuation">)</span>
   <span class="token function">realDom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'------------------'</span><span class="token punctuation">)</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'------------------'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
</ul>
<p>结果<br><img src="http://otjhywl32.bkt.clouddn.com/vue.js%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F1.PNG" width="350" height="600"><br>当data发生改变时，会调用beforeUpdate和updated方法<br><img src="http://otjhywl32.bkt.clouddn.com/vue.js%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F2.PNG" width="420"></p>
<p>可见<br>beforeUpdate ：数据更新到dom之前，我们可以看到$el对象已经修改，但是我们页面上dom的数据还没有发生改变<br>updated: dom结构会通过虚拟dom的原则，找到需要更新页面dom结构的最小路径，将改变更新到dom上面，完成更新</p>
<p>实例销毁<br><img src="http://otjhywl32.bkt.clouddn.com/vue.js%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F3.PNG" width="340"><br>beforeDestroy,destroed :实例的销毁，<strong>vue实例还是存在的</strong>，只是解绑了事件的监听还有watcher对象数据与view的绑定，即数据驱动</p>
]]></content>
      
        <categories>
            
            <category> vue.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[this总结]]></title>
      <url>/2017/07/25/this%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>首先，this的指向问题可以用一句话总结就是：<strong>this总是指向调用该函数的对象</strong>，也就是说this指向谁与函数声明的位置没有关系，只与调用的位置有关。这是判断this的一个大体原则，而具体的小原则按照优先级的不同大致可以分为以下几点：</p>
<h2 id="一-优先级"><a href="#一-优先级" class="headerlink" title="一.优先级"></a>一.优先级</h2><p><strong><em>new绑定&gt;显式绑定&gt;隐式绑定&gt;默认绑定</em></strong></p>
<h3 id="1-new绑定"><a href="#1-new绑定" class="headerlink" title="1.new绑定"></a>1.new绑定</h3><p>new方式是优先级最高的一种调用方式，也就是说只要是出现new方式来调用一个函数，this肯定会指向new调用函数新创建的对象。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">thisTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">=</span>a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> data<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">thisTo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在这里进行了new绑定</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//2</span>
</code></pre>
<h3 id="2-显式绑定"><a href="#2-显式绑定" class="headerlink" title="2.显式绑定"></a>2.显式绑定</h3><p>显示绑定指的是通过call()和apply()方法对函数进行的调用，对this影响的优先级仅次于new绑定。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">thisTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> data<span class="token operator">=</span><span class="token punctuation">{</span>
    a<span class="token punctuation">:</span><span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
thisTo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//2</span>
</code></pre>
<h3 id="3-隐式绑定"><a href="#3-隐式绑定" class="headerlink" title="3.隐式绑定"></a>3.隐式绑定</h3><p>隐式绑定是指通过对象的属性进行添加，从而调用this所在函数，该方式的优先级在显示绑定之后。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">thisTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> data<span class="token operator">=</span><span class="token punctuation">{</span>
    a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>
    foo<span class="token punctuation">:</span>thisTo <span class="token comment" spellcheck="true">//通过属性引用this所在函数 </span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>
</code></pre>
<h3 id="4-默认绑定"><a href="#4-默认绑定" class="headerlink" title="4.默认绑定"></a>4.默认绑定</h3><p>默认绑定是指当上面这三条绑定规则都不符合时采用的绑定规则，默认绑定会把this默认绑定到全局对象中，是优先级最低的绑定规则</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">thisTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//a是全局对象的一个同名属性</span>
<span class="token function">thisTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>
</code></pre>
<h2 id="二-this绑定的特殊情况"><a href="#二-this绑定的特殊情况" class="headerlink" title="二.this绑定的特殊情况"></a>二.this绑定的特殊情况</h2><h3 id="1-隐式丢失"><a href="#1-隐式丢失" class="headerlink" title="1.隐式丢失"></a>1.隐式丢失</h3><p>当进行隐式绑定时，如果进行一次引用赋值或者传参操作，会造成this的丢失，从而最后将this绑定到全局对象中去。</p>
<h4 id="1-1引用赋值丢失"><a href="#1-1引用赋值丢失" class="headerlink" title="1.1引用赋值丢失"></a><em>1.1引用赋值丢失</em></h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">thisTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> data<span class="token operator">=</span><span class="token punctuation">{</span>
    a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>
    foo<span class="token punctuation">:</span>thisTo <span class="token comment" spellcheck="true">//通过属性引用this所在函数 </span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全局属性</span>

<span class="token keyword">var</span> newData<span class="token operator">=</span>data<span class="token punctuation">.</span>foo<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里进行了一次引用赋值 </span>
<span class="token function">newData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
</code></pre>
<p>原理：因为newData实际上引用的是foo函数本身，跟data对象没有任何关系,data对象只是一个中间桥梁。而newData就是一个本身不带a属性的对象，自然最后只能把a绑定到全局对象上了。</p>
<h4 id="1-2传参丢失"><a href="#1-2传参丢失" class="headerlink" title="1.2传参丢失"></a><em>1.2传参丢失</em></h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">thisTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> data<span class="token operator">=</span><span class="token punctuation">{</span>
    a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>
    foo<span class="token punctuation">:</span>thisTo <span class="token comment" spellcheck="true">//通过属性引用this所在函数 </span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全局属性</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>foo<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3</span>
</code></pre>
<p>原理：setTimeout(fn,delay) { fn(); } 实际上fn是一个参数传递的引用(fn=data.foo)，与引用丢失的原理一样</p>
<h4 id="1-3-Function-prototype-bind"><a href="#1-3-Function-prototype-bind" class="headerlink" title="1.3 Function.prototype.bind()"></a><em>1.3 Function.prototype.bind()</em></h4><p>为了解决隐式丢失的问题，ES5提供了bind方法，bind()会返回一个硬编码的新函数，它会把参数设置为this的上下文并调用原始函数。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">thisTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> data<span class="token operator">=</span><span class="token punctuation">{</span>
    a<span class="token punctuation">:</span><span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> bar<span class="token operator">=</span>thisTo<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>
</code></pre>
<h3 id="2-间接引用"><a href="#2-间接引用" class="headerlink" title="2.间接引用"></a>2.间接引用</h3><p>间接引用是指一个定义对象的方法引用另一个对象存在的方法，这种情况下会使得this进行默认绑定。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">thisTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> data<span class="token operator">=</span><span class="token punctuation">{</span>
  a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>
  foo<span class="token punctuation">:</span>thisTo
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newData<span class="token operator">=</span><span class="token punctuation">{</span>
  a<span class="token punctuation">:</span><span class="token number">3</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>
<span class="token punctuation">(</span>newData<span class="token punctuation">.</span>foo<span class="token operator">=</span>data<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//4</span>
</code></pre>
<p>原理：newData.foo=data.foo的返回值是目标函数的引用，因此调用的位置实际上是foo(),根据之前的隐式丢失里面说的原则，这里会应用默认绑定.</p>
<h3 id="3-ES6箭头函数"><a href="#3-ES6箭头函数" class="headerlink" title="3.ES6箭头函数"></a>3.ES6箭头函数</h3><p>ES6的箭头函数在this这块是一个特殊的改进，箭头函数使用了词法作用域取代了传统的this机制，所以箭头函数无法使用上面所说的这些this优先级的原则，注意的是<strong><em>在箭头函数中，是根据外层父亲作用域来决定this的指向问题。</em></strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">thisTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>
 a<span class="token punctuation">:</span><span class="token number">2</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
thisTo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3</span>
</code></pre>
<p>不用箭头函数，发生隐式丢失，最后的this默认绑定到全局作用域，输出3。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">thisTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>
 a<span class="token punctuation">:</span><span class="token number">2</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>加粗文字
thisTo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>
</code></pre>
<p>用了箭头函数，不会发生隐式丢失，this绑定到外层父作用域thisTO()，thisTo的被调用者是obj对象，所以最后的this到obj对象中，输出2。</p>
<p>如果不用箭头函数实现相同的输出，可以采用下面这种方式：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">thisTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">var</span> self<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在当前作用域中捕获this </span>
   <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//传入self代替之前的this</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>
 a<span class="token punctuation">:</span><span class="token number">2</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
thisTo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>
</code></pre>
<h2 id="三-总结："><a href="#三-总结：" class="headerlink" title="三.总结："></a>三.总结：</h2><p>this的绑定机制，就是要找到这个函数的直接调用位置，然后应用绑定的四条规则，当出现满足多个规则时，按照优先级的高低决定最终的绑定规则。此外注意几种特殊情况，特别是ES6中的箭头函数。</p>
<h2 id="四-参考书籍："><a href="#四-参考书籍：" class="headerlink" title="四.参考书籍："></a>四.参考书籍：</h2><p>《你不知道的JavaScript上卷》</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[闭包理解与总结]]></title>
      <url>/2017/07/23/%E9%97%AD%E5%8C%85%E7%90%86%E8%A7%A3%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>闭包是JavaScript比较重要同时也是不好理解的一个概念，从很早就翻看各种博文以及在书上看相关的内容，但总是一知半解，随着经验的积累，现在对闭包又有了新的认识，在此总结。<br>先看一下各种对闭包的定义的说法，在《JavaScript高级程序设计》中的定义为：</p>
<blockquote>
<p>闭包是指有权访问另一个函数作用域中的变量的函数</p>
</blockquote>
<p>很好理解，但实际情况却有多种场景<br>《你不知道的JavaScript》：</p>
<blockquote>
<p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行</p>
</blockquote>
<p>作用域主要有两种，一种最为普遍被大多数编程语言采用的就是词法作用域，比如JavaScript，词法作用域就是定义在词法阶段的作用域，即由你在写代码时将变量和块作用域写在哪里决定的，另一种叫做动态作用域，Bash脚本等在使用。<br>这里的定义就不太好理解，但其实上和上面的定义也很相似。</p>
<p>《javascript权威指南》 （第六版）第8章第6节</p>
<blockquote>
<p>从技术的角度讲，所有的JavaScript函数都是闭包：它们都是对象，它们都关联到作用域链</p>
</blockquote>
<p>所有的函数都是闭包因为有一个很大的window全局对象，你写的函数外部有一个默认的全局函数，你所有写的函数都在这个函数内部。<br>从广义上来讲是这样，狭义闭包即上面js高程定义。闭包的三大特性：1.函数嵌套函数 2.函数内部可以引用外部的参数和变量 3.参数和变量不会被垃圾回收机制回收<br>看一个例子</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>
  <span class="token punctuation">}</span>
  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>从技术上来讲是闭包，但这个例子并不具备闭包的特性，foo()执行后，foo()内部作用域被销毁。<br>下面是一个典型闭包：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> bar
<span class="token punctuation">}</span>

<span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>这里foo()内部返回bar()函数，函数的特别之处在于可以创建一个独立的作用域，第九行foo()执行返回值复制给变量baz,但bar()并没有被执行，foo()执行后按常理内部作用域被销毁，但由于返回的bar内仍然在引用变量a,因此a不会被销毁，即使执行baz()后bar内的上下文环境中的a活动对象被释放，但foo()内的仍然保留。第一个例子会被销毁的原因是闭包在函数内调用过，它的生命周期会随着父级函数结束被释放。</p>
<p>如果还是觉得不直观可以看以上两种形式的演化版<br><img src="http://otjhywl32.bkt.clouddn.com/bibao1.png" alt="Alt text">     <img src="http://otjhywl32.bkt.clouddn.com/bibao2.png" alt="Alt text"><br>左边无论执行多少次都是相同的结果，因为每次执行创建新的闭包，每次执行过后内部作用域都被销毁，右边函数中的闭包被父函数当做返回值存储在外部变量中，此时闭包函数的生命周期等于存储其的外部变量的生命周期，并且不会被销毁。</p>
<p>闭包常见的形式还有以下几种：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">,</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">wait</span><span class="token punctuation">(</span> <span class="token string">"hello,closure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>由于javascript是单线程的，而setTimeout是异步的，异步操作都会被放到“events loop”异步队列中，因此当wait()执行完后，setTimeout的函数还未执行，里面的函数仍在引用message,所以不会被清除。</p>
<p>循环和闭包：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>i<span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>结果是以每秒一次的频率输出五次6，上面已经解释了异步，因此当延迟函数执行时，循环已经完成，循环的终止条件是i不在&lt;=5，条件首次成立时i的值是6，循环中的五个函数都被封闭在一个共享的全局作用域中，因此引用的是相同且唯一的i。<br>闭包与变量：</p>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">function</span> <span class="token function">createFunctions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> i<span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">return</span> result<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre>
<p>该函数会返回一个函数数组，每个函数都返回5。因为每个函数的作用域链中都保存着createFunctions()函数的活动对象，它们引用的是都是同一个变量i,当createFuntions()函数返回后，变量i的值为5，此时每个函数都引用着保存变量对象i的同一个变量对象，所以在每个函数内部i的值都是5。<br>总结为<strong>闭包只能取得包含函数中任何变量的最后一个值</strong>，闭包保存的是整个变量对象，而不是某个特殊的变量。</p>
<p>常用以下方法解决此类问题：<br>1.可以通过创建另一个匿名函数强制让闭包符合预期。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createFunctions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> num<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">return</span> result<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre>
<p>通过让函数立即执行，使得每个数组的每个函数引用的i与for循环同步,同时js函数参数是按值传递的，所以会将变量i的当前值复制给参数num,实际上数组内存储的函数都是function() { return num },如图<br><img src="http://otjhywl32.bkt.clouddn.com/bibao3.png" alt="Alt text"><br>在内层闭包中</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> num<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>由于返回的函数在引用num,外层函数的参数num没有被销毁，因此可以取得当时num值</p>
<p>2.使用es6 let<br><img src="http://otjhywl32.bkt.clouddn.com/bibao4.png" alt="Alt text"><br>let作用于块级作用域，因此数组中各函数中的i都引用自己块级作用域内的i.</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[test]]></title>
      <url>/2017/07/20/hi/</url>
      <content type="html"><![CDATA[<h1 id="大标题"><a href="#大标题" class="headerlink" title="大标题"></a>大标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容</p>
<blockquote>
<p>区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容</p>
</blockquote>
<p>输出html为：</p>
<p></p><h1>A First Level Header</h1><p></p>
<p></p><h2>A Second Level Header</h2><p></p>
<p>Now is the time for all good men to come to<br>the aid of their country. This is just a<br>regular paragraph.</p><br><p>The quick brown fox jumped over the lazy<br>dog’s back.</p><br><h3>Header 3</h3><br><blockquote><br><p>This is a blockquote.</p><br><p>This is the second paragraph in the blockquote.</p><br><h2>This is an H2 in a blockquote</h2><br></blockquote><br><br>使用型号和底线来标记需要强调的区段<br>Some of these words <em>are emphasized</em>.<br>Some of these words <em>are emphasized also</em>.<br>Use two asterisks for <strong>strong emphasis</strong>.<br>Or, if you prefer, <strong>use two underscores instead</strong>.<br><br>输出html为：<br><p>Some of these words <em>are emphasized</em>.<br>Some of these words <em>are emphasized also</em>.</p><br><p>Use two asterisks for <strong>strong emphasis</strong>.<br>Or, if you prefer, <strong>use two underscores instead</strong>.</p>

<p>无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的，使用星号：</p>
<ul>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.</li>
</ul>
<ul>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.</li>
</ul>
<ul>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.</li>
</ul>
<p>都会输出html为：</p>
<ul><br><li>Candy.</li><br><li>Gum.</li><br><li>Booze.</li><br></ul>

<p>有序的列表则是使用一般的数字接着一个英文句点作为项目标记：</p>
<ol>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ol>
<p>输出html为：</p>
<ol><br><li>Red</li><br><li>Green</li><br><li>Blue</li><br></ol>

<p>Markdown 支援两种形式的链接语法： 行内 和 参考 两种形式，两种都是使用角括号来把文字转成链接。<br>This is an <a href="http://example.com/" target="_blank" rel="external">example link</a>.</p>
<p>在一般的段落文字中，你可以使用反引号 ` 来标记代码区段，区段内的 &amp;、&lt; 和 &gt; 都会被自动的转换成 HTML 实体，这项特性让你可以很容易的在代码区段内插入 HTML 码：</p>
<pre class=" language-css"><code class="language-css"><span class="token number">.</span>shopcart
    <span class="token property">position</span><span class="token punctuation">:</span> fixed
    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">50</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">48</span>px
    <span class="token number">.</span>content
      <span class="token property">display</span><span class="token punctuation">:</span> flex
      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#141d27</span>
      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0</span>
      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">0.4</span><span class="token punctuation">)</span>
      <span class="token number">.</span>content-left
        <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span>
        <span class="token number">.</span>logo-wrapper
          <span class="token property">display</span><span class="token punctuation">:</span> inline-block
          <span class="token property">position</span><span class="token punctuation">:</span> relative
          <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">10</span>px
          <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">12</span>px
          <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">6</span>px
          <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">56</span>px
          <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">56</span>px
          <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box
          <span class="token property">vertical-align</span><span class="token punctuation">:</span> top
          <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span>
          <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#141d27</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token function">totalPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>selectFoods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          total <span class="token operator">+</span><span class="token operator">=</span> food<span class="token punctuation">.</span>price <span class="token operator">*</span> food<span class="token punctuation">.</span>count<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> total<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">totalCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>selectFoods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          count <span class="token operator">+</span><span class="token operator">=</span> food<span class="token punctuation">.</span>count<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>/about/about.html</url>
      <content type="html"><![CDATA[<p>关于：<br> 如果有什么建议欢迎<br>  联系方式： QQ 384035991</p>
]]></content>
    </entry>
    
  
</search>
