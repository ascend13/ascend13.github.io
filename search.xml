<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[this总结]]></title>
      <url>/2017/07/25/this%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>首先，this的指向问题可以用一句话总结就是：<strong>this总是指向调用该函数的对象</strong>，也就是说this指向谁与函数声明的位置没有关系，只与调用的位置有关。这是判断this的一个大体原则，而具体的小原则按照优先级的不同大致可以分为以下几点：</p>
<p><font size="3"><strong>一.优先级：new绑定&gt;显式绑定&gt;隐式绑定&gt;默认绑定</strong></font><br><strong>1.new绑定</strong><br>new方式是优先级最高的一种调用方式，也就是说只要是出现new方式来调用一个函数，this肯定会指向new调用函数新创建的对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function() thisTo(a)&#123;</div><div class="line"> this.a=a;</div><div class="line">&#125;</div><div class="line">var data=new thisTo(2); //在这里进行了new绑定</div><div class="line">console.log(data.a);  //2</div></pre></td></tr></table></figure></p>
<p><strong>2.显式绑定</strong><br>显示绑定指的是通过call()和apply()方法对函数进行的调用，对this影响的优先级仅次于new绑定。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function thisTo()&#123;</div><div class="line">   console.log(this.a);</div><div class="line">&#125;</div><div class="line">var data=&#123;</div><div class="line">    a:2</div><div class="line">&#125;; </div><div class="line">thisTo.call(data));  //2</div></pre></td></tr></table></figure></p>
<p><strong>3.隐式绑定</strong><br>隐式绑定是指通过对象的属性进行添加，从而调用this所在函数，该方式的优先级在显示绑定之后。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function thisTo()&#123;</div><div class="line">   console.log(this.a);</div><div class="line">&#125;</div><div class="line">var data=&#123;</div><div class="line">    a:2,</div><div class="line">    foo:thisTo //通过属性引用this所在函数 </div><div class="line">&#125;;</div><div class="line">data.foo(); //2</div></pre></td></tr></table></figure></p>
<p><strong>4.默认绑定</strong><br>默认绑定是指当上面这三条绑定规则都不符合时采用的绑定规则，默认绑定会把this默认绑定到全局对象中，是优先级最低的绑定规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function thisTo()&#123;</div><div class="line">   console.log(this.a);</div><div class="line">&#125;</div><div class="line">var a=2; //a是全局对象的一个同名属性</div><div class="line">thisTo(); //2</div></pre></td></tr></table></figure></p>
<p><font size="3"><strong>二.this绑定的特殊情况</strong></font><br><strong>1.隐式丢失</strong><br>当进行隐式绑定时，如果进行一次引用赋值或者传参操作，会造成this的丢失，从而最后将this绑定到全局对象中去。<br><em>引用赋值丢失</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function thisTo()&#123;</div><div class="line">   console.log(this.a);</div><div class="line">&#125;</div><div class="line">var data=&#123;</div><div class="line">    a:2,</div><div class="line">    foo:thisTo //通过属性引用this所在函数 </div><div class="line">&#125;;</div><div class="line">var a=3;//全局属性</div><div class="line"></div><div class="line">var newData=data.foo; //这里进行了一次引用赋值 </div><div class="line">newData(); // 3</div></pre></td></tr></table></figure></p>
<p>原理：因为newData实际上引用的是foo函数本身，跟data对象没有任何关系,data对象只是一个中间桥梁。而newData就是一个本身不带a属性的对象，自然最后只能把a绑定到全局对象上了。<br><em>1.2传参丢失</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function thisTo()&#123;</div><div class="line">   console.log(this.a);</div><div class="line">&#125;</div><div class="line">var data=&#123;</div><div class="line">    a:2,</div><div class="line">    foo:thisTo //通过属性引用this所在函数 </div><div class="line">&#125;;</div><div class="line">var a=3;//全局属性</div><div class="line"></div><div class="line">setTimeout(data.foo,100);// 3</div></pre></td></tr></table></figure></p>
<p>原理：setTimeout(fn,delay) { fn(); } 实际上fn是一个参数传递的引用(fn=data.foo)，与引用丢失的原理一样<br><em>1.3 Function.prototype.bind()</em><br>为了解决隐式丢失的问题，ES5提供了bind方法，bind()会返回一个硬编码的新函数，它会把参数设置为this的上下文并调用原始函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function thisTo()&#123;</div><div class="line">   console.log(this.a);</div><div class="line">&#125;</div><div class="line">var data=&#123;</div><div class="line">    a:2</div><div class="line">&#125;; </div><div class="line">var a=3;</div><div class="line">var bar=thisTo.bind(data);</div><div class="line">console.log(bar()); //2</div></pre></td></tr></table></figure></p>
<p><strong>2.间接引用</strong><br>间接引用是指一个定义对象的方法引用另一个对象存在的方法，这种情况下会使得this进行默认绑定。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function thisTo()&#123;</div><div class="line">   console.log(this.a);</div><div class="line">&#125;</div><div class="line">var data=&#123;</div><div class="line">  a:2,</div><div class="line">  foo:thisTo</div><div class="line">&#125;;</div><div class="line">var newData=&#123;</div><div class="line">  a:3</div><div class="line">&#125;</div><div class="line">var a=4;</div><div class="line">data.foo(); //2</div><div class="line">(newData.foo=data.foo)() //4</div></pre></td></tr></table></figure></p>
<p>原理：newData.foo=data.foo的返回值是目标函数的引用，因此调用的位置实际上是foo(),根据之前的隐式丢失里面说的原则，这里会应用默认绑定.<br><strong>3.ES6箭头函数</strong><br>ES6的箭头函数在this这块是一个特殊的改进，箭头函数使用了词法作用域取代了传统的this机制，所以箭头函数无法使用上面所说的这些this优先级的原则，注意的是<strong><em>在箭头函数中，是根据外层父亲作用域来决定this的指向问题。</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function thisTo()&#123;</div><div class="line">   setTimeout(function()&#123;</div><div class="line">    console.log(this.a);</div><div class="line">&#125;,100);</div><div class="line">&#125;</div><div class="line">var obj=&#123;</div><div class="line"> a:2</div><div class="line">&#125;</div><div class="line">var a=3;</div><div class="line">thisTo.call(obj); //3</div></pre></td></tr></table></figure></p>
<p>不用箭头函数，发生隐式丢失，最后的this默认绑定到全局作用域，输出3。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function thisTo()&#123;</div><div class="line">   setTimeout(()=&gt;&#123;</div><div class="line">    console.log(this.a);</div><div class="line">&#125;,100);</div><div class="line">&#125;</div><div class="line">var obj=&#123;</div><div class="line"> a:2</div><div class="line">&#125;</div><div class="line">var a=3;加粗文字</div><div class="line">thisTo.call(obj); //2</div></pre></td></tr></table></figure></p>
<p>用了箭头函数，不会发生隐式丢失，this绑定到外层父作用域thisTO()，thisTo的被调用者是obj对象，所以最后的this到obj对象中，输出2。</p>
<p>如果不用箭头函数实现相同的输出，可以采用下面这种方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function thisTo()&#123;</div><div class="line">   var self=this; //在当前作用域中捕获this </div><div class="line">   setTimeout(function()&#123;</div><div class="line">    console.log(self.a); //传入self代替之前的this</div><div class="line">&#125;,100);</div><div class="line">&#125;</div><div class="line">var obj=&#123;</div><div class="line"> a:2</div><div class="line">&#125;</div><div class="line">var a=3;</div><div class="line">thisTo.call(obj); //2</div></pre></td></tr></table></figure></p>
<p><font size="3"><strong>三.总结：</strong></font><br>this的绑定机制，就是要找到这个函数的直接调用位置，然后应用绑定的四条规则，当出现满足多个规则时，按照优先级的高低决定最终的绑定规则。此外注意几种特殊情况，特别是ES6中的箭头函数。</p>
<p><font size="3"><strong>四.参考书籍：</strong></font><br>《你不知道的JavaScript上卷》</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[闭包理解与总结]]></title>
      <url>/2017/07/23/%E9%97%AD%E5%8C%85%E7%90%86%E8%A7%A3%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>闭包是JavaScript比较重要同时也是不好理解的一个概念，从很早就翻看各种博文以及在书上看相关的内容，但总是一知半解，随着经验的积累，现在对闭包又有了新的认识，在此总结。<br>先看一下各种对闭包的定义的说法，在《JavaScript高级程序设计》中的定义为：</p>
<blockquote>
<p>闭包是指有权访问另一个函数作用域中的变量的函数</p>
</blockquote>
<p>很好理解，但如果是这么简单就不用去总结了<br>《你不知道的JavaScript》：</p>
<blockquote>
<p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行</p>
</blockquote>
<p>作用域主要有两种，一种最为普遍被大多数编程语言采用的就是词法作用域，比如JavaScript，词法作用域就是定义在词法阶段的作用域，即由你在写代码时将变量和块作用域写在哪里决定的，另一种叫做动态作用域，Bash脚本等在使用。<br>这里的定义就不太好理解，但其实上和上面的定义也很相似。</p>
<p>《javascript权威指南》 （第六版）第8章第6节</p>
<blockquote>
<p>从技术的角度讲，所有的JavaScript函数都是闭包：它们都是对象，它们都关联到作用域链</p>
</blockquote>
<p>所有的函数都是闭包因为有一个很大的window全局对象，你写的函数外部有一个默认的全局函数，你所有写的函数都在这个函数内部。<br>从广义上来讲是这样，狭义闭包即上面js高程定义。闭包的三大特性：1.函数嵌套函数 2.函数内部可以引用外部的参数和变量 3.参数和变量不会被垃圾回收机制回收<br>看一个例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(a);<span class="comment">//2</span></div><div class="line">  &#125;</div><div class="line">  bar();</div><div class="line">&#125;</div><div class="line">foo();</div></pre></td></tr></table></figure></p>
<p>从技术上来讲是闭包，但这个例子并不具备闭包的特性，foo()执行后，foo()内部作用域被销毁。<br>下面是一个典型闭包：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(a);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> bar</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> baz = foo();</div><div class="line">baz();</div></pre></td></tr></table></figure></p>
<p>这里foo()内部返回bar()函数，函数的特别之处在于可以创建一个独立的作用域，第九行foo()执行返回值复制给变量baz,但bar()并没有被执行，foo()执行后按常理内部作用域被销毁，但由于返回的bar内仍然在引用变量a,因此a不会被销毁，即使执行baz()后bar内的上下文环境中的a活动对象被释放，但foo()内的仍然保留。第一个例子会被销毁的原因是闭包在函数内调用过，它的生命周期会随着父级函数结束被释放。</p>
<p>如果还是觉得不直观可以看以上两种形式的演化版<br><img src="http://otjhywl32.bkt.clouddn.com/bibao1.png" alt="Alt text">     <img src="http://otjhywl32.bkt.clouddn.com/bibao2.png" alt="Alt text"><br>左边无论执行多少次都是相同的结果，因为每次执行创建新的闭包，每次执行过后内部作用域都被销毁，右边函数中的闭包被父函数当做返回值存储在外部变量中，此时闭包函数的生命周期等于存储其的外部变量的生命周期，并且不会被销毁。</p>
<p>闭包常见的形式还有以下几种：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span>(<span class="params">message</span>) </span>&#123;</div><div class="line"></div><div class="line">  setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>,log(message);</div><div class="line">    &#125;,<span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line">wait( <span class="string">"hello,closure"</span>);</div></pre></td></tr></table></figure></p>
<p>由于javascript是单线程的，而setTimeout是异步的，异步操作都会被放到“events loop”异步队列中，因此当wait()执行完后，setTimeout的函数还未执行，里面的函数仍在引用message,所以不会被清除。</p>
<p>循环和闭包：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</div><div class="line">  setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i)</div><div class="line">  &#125;,i*<span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果是以每秒一次的频率输出五次6，上面已经解释了异步，因此当延迟函数执行时，循环已经完成，循环的终止条件是i不在&lt;=5，条件首次成立时i的值是6，循环中的五个函数都被封闭在一个共享的全局作用域中，因此引用的是相同且唯一的i。<br>闭包与变量：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunctions</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>; i++) &#123;</div><div class="line">    result[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> i;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该函数会返回一个函数数组，每个函数都返回5。因为每个函数的作用域链中都保存着createFunctions()函数的活动对象，它们引用的是都是同一个变量i,当createFuntions()函数返回后，变量i的值为5，此时每个函数都引用着保存变量对象i的同一个变量对象，所以在每个函数内部i的值都是5。<br>总结为<strong>闭包只能取得包含函数中任何变量的最后一个值</strong>，闭包保存的是整个变量对象，而不是某个特殊的变量。</p>
<p>常用以下方法解决此类问题：<br>1.可以通过创建另一个匿名函数强制让闭包符合预期。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunctions</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"></div><div class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>; i++) &#123;</div><div class="line">   result[i] = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="keyword">return</span> num;</div><div class="line">      &#125;;</div><div class="line">   &#125;(i)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">return</span> result;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>通过让函数立即执行，使得每个数组的每个函数引用的i与for循环同步,同时js函数参数是按值传递的，所以会将变量i的当前值复制给参数num,实际上数组内存储的函数都是function() { return num },如图<br><img src="http://otjhywl32.bkt.clouddn.com/bibao3.png" alt="Alt text"><br>在内层闭包中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="keyword">return</span> num;</div><div class="line">      &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>由于返回的函数在引用num,外层函数的参数num没有被销毁，因此可以取得当时num值</p>
<p>2.使用es6 let<br><img src="http://otjhywl32.bkt.clouddn.com/bibao4.png" alt="Alt text"><br>let作用于块级作用域，因此数组中各函数中的i都引用自己块级作用域内的i.</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[test]]></title>
      <url>/2017/07/20/hi/</url>
      <content type="html"><![CDATA[<h1 id="大标题"><a href="#大标题" class="headerlink" title="大标题"></a>大标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容</p>
<blockquote>
<p>区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容区块内容</p>
</blockquote>
<p>输出html为：</p>
<p></p><h1>A First Level Header</h1><p></p>
<p></p><h2>A Second Level Header</h2><p></p>
<p>Now is the time for all good men to come to<br>the aid of their country. This is just a<br>regular paragraph.</p><br><p>The quick brown fox jumped over the lazy<br>dog’s back.</p><br><h3>Header 3</h3><br><blockquote><br><p>This is a blockquote.</p><br><p>This is the second paragraph in the blockquote.</p><br><h2>This is an H2 in a blockquote</h2><br></blockquote><br><br>使用型号和底线来标记需要强调的区段<br>Some of these words <em>are emphasized</em>.<br>Some of these words <em>are emphasized also</em>.<br>Use two asterisks for <strong>strong emphasis</strong>.<br>Or, if you prefer, <strong>use two underscores instead</strong>.<br><br>输出html为：<br><p>Some of these words <em>are emphasized</em>.<br>Some of these words <em>are emphasized also</em>.</p><br><p>Use two asterisks for <strong>strong emphasis</strong>.<br>Or, if you prefer, <strong>use two underscores instead</strong>.</p>

<p>无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的，使用星号：</p>
<ul>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.</li>
</ul>
<ul>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.</li>
</ul>
<ul>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.</li>
</ul>
<p>都会输出html为：</p>
<ul><br><li>Candy.</li><br><li>Gum.</li><br><li>Booze.</li><br></ul>

<p>有序的列表则是使用一般的数字接着一个英文句点作为项目标记：</p>
<ol>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ol>
<p>输出html为：</p>
<ol><br><li>Red</li><br><li>Green</li><br><li>Blue</li><br></ol>

<p>Markdown 支援两种形式的链接语法： 行内 和 参考 两种形式，两种都是使用角括号来把文字转成链接。<br>This is an <a href="http://example.com/" target="_blank" rel="external">example link</a>.</p>
<p>在一般的段落文字中，你可以使用反引号 ` 来标记代码区段，区段内的 &amp;、&lt; 和 &gt; 都会被自动的转换成 HTML 实体，这项特性让你可以很容易的在代码区段内插入 HTML 码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.shopcart</span></div><div class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">fixed</span></div><div class="line">    <span class="selector-tag">left</span>: 0</div><div class="line">    <span class="selector-tag">bottom</span>: 0</div><div class="line">    <span class="selector-tag">z-index</span>: 50</div><div class="line">    <span class="selector-tag">width</span>: 100%</div><div class="line">    <span class="selector-tag">height</span>: 48<span class="selector-tag">px</span></div><div class="line">    <span class="selector-class">.content</span></div><div class="line">      <span class="selector-tag">display</span>: <span class="selector-tag">flex</span></div><div class="line">      <span class="selector-tag">background</span>: <span class="selector-id">#141d27</span></div><div class="line">      <span class="selector-tag">font-size</span>: 0</div><div class="line">      <span class="selector-tag">color</span>: <span class="selector-tag">rgba</span>(255, 255, 255, 0<span class="selector-class">.4</span>)</div><div class="line">      <span class="selector-class">.content-left</span></div><div class="line">        <span class="selector-tag">flex</span>: 1</div><div class="line">        <span class="selector-class">.logo-wrapper</span></div><div class="line">          <span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span></div><div class="line">          <span class="selector-tag">position</span>: <span class="selector-tag">relative</span></div><div class="line">          <span class="selector-tag">top</span>: <span class="selector-tag">-10px</span></div><div class="line">          <span class="selector-tag">margin</span>: 0 12<span class="selector-tag">px</span></div><div class="line">          <span class="selector-tag">padding</span>: 6<span class="selector-tag">px</span></div><div class="line">          <span class="selector-tag">width</span>: 56<span class="selector-tag">px</span></div><div class="line">          <span class="selector-tag">height</span>: 56<span class="selector-tag">px</span></div><div class="line">          <span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span></div><div class="line">          <span class="selector-tag">vertical-align</span>: <span class="selector-tag">top</span></div><div class="line">          <span class="selector-tag">border-radius</span>: 50%</div><div class="line">          <span class="selector-tag">background</span>: <span class="selector-id">#141d27</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">      totalPrice() &#123;</div><div class="line">        <span class="keyword">let</span> total = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.selectFoods.forEach(<span class="function">(<span class="params">food</span>) =&gt;</span> &#123;</div><div class="line">          total += food.price * food.count;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> total;</div><div class="line">      &#125;,</div><div class="line">      totalCount() &#123;</div><div class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.selectFoods.forEach(<span class="function">(<span class="params">food</span>) =&gt;</span> &#123;</div><div class="line">          count += food.count;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> count;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>/about/about.html</url>
      <content type="html"><![CDATA[<p>姓名：<br>学校：<br>专业：</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
